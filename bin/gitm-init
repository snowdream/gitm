#!/usr/bin/env node
var fs = require('fs');
var os = require('os');
var path = require('path');
var gitm_util = require('./gitm-util');
var ignore = require('ignore');

init();


/**
 * gitm init
 */
function init() {
    initRepo();
    initBranch();
    initIgnore();
}

/**
 *  for json.stringify
 *  see: http://stackoverflow.com/a/4910689
 * @param key
 * @param value
 * @returns {*}
 */
function replacer(key, value) {
    if (!value) return undefined;
    if (value instanceof  Array && value.length == 0) return undefined;
    else return value;
}

/**
 * check whether the repo.gitm exist.
 * if not ,try to create it.
 */
function initRepo() {
    if (fs.existsSync('./repo.gitm')) {
        console.info("The repo.gitm does exist.");
        return;
    }

    var repo= {};
    walk = function (isRoot, dir, parent) {
        var files = fs.readdirSync(dir);
        if (files.contains('.git')) {
            var item;
            var sub;

            if (isRoot) {
                if (!repo) {
                    repo = {};
                }

                if (!files.contains('.git')) {
                    item = sub = repo.repositories = [];
                } else {
                    item = repo.repository = {};
                    sub = item.repositories = [];
                }
            } else {
                item = {};
                sub = item.repositories = [];
            }

            if (!isRoot) {
                try {
                    process.chdir(dir);
                    console.log(os.EOL);
                    console.log('$ cd ' + dir);
                }
                catch (err) {
                    console.log('chdir: ' + err);
                }
            }

            if (!(item instanceof  Array)) {
                item.url = gitm_util.currentRemoteUrl();
            }

            if (parent) {
                if (parent instanceof  Array) {
                    parent.push(item);
                }
            }

            if (!isRoot) {
                process.chdir("..");
                console.log('$ cd ..');
            }
        }else{
            if(!isRoot){
                return;
            }else{
                sub = repo.repositories = [];
            }
        }

        files.forEach(function (file) {
            var tmpPath = dir + '/' + file,
                stats = fs.statSync(tmpPath);

            if (stats.isDirectory()) {
                walk(false, tmpPath, sub);
            }
        });
    };

    console.log('$ cd ' + process.cwd());
    walk(true, process.cwd(), repo);

    if (!repo) {
        return;
    }

    var outputFilename = './repo.gitm';

    fs.writeFile(outputFilename, JSON.stringify(repo, replacer, 4), function (err) {
        if (err) throw err;
        console.info("The repo.gitm has been created..");
    });
}


/**
 * check whether the branch.gitm exist.
 * if not ,try to create it.
 */
function initBranch() {
    if (fs.existsSync('./branch.gitm')) {
        console.info("The branch.gitm does exist.");
        return;
    }

    var branchInfos = [];
    var branchInfo = {};
    var default_group_name = 'current';
    walk = function (isRoot, dir, branchInfo) {
        var files = fs.readdirSync(dir);
        if (files.contains('.git')) {
            if (!branchInfo) {
                branchInfo = {};
            }

            if (!branchInfo[default_group_name]) {
                branchInfo[default_group_name] = {};
            }

            if (!isRoot) {
                try {
                    process.chdir(dir);
                    console.log(os.EOL);
                    console.log('$ cd ' + dir);
                }
                catch (err) {
                    console.log('chdir: ' + err);
                }
            }

            branchInfo[default_group_name][path.basename(process.cwd())] = gitm_util.currentBranch();

            if (!isRoot) {
                process.chdir("..");
                console.log('$ cd ..');
            }
        }else{
            if(!isRoot){
                return;
            }
        }

        files.forEach(function (item) {
            var tmpPath = dir + '/' + item,
                stats = fs.statSync(tmpPath);

            if (stats.isDirectory()) {
                walk(false, tmpPath, branchInfo);
            }
        });
    };

    console.log('$ cd ' + process.cwd());
    walk(true, process.cwd(), branchInfo);
    branchInfos.push(branchInfo);

    if (!branchInfo) {
        return;
    }

    var outputFilename = './branch.gitm';

    fs.writeFile(outputFilename, JSON.stringify(branchInfo, replacer, 4), function (err) {
        if (err) throw err;
        console.info("The branch.gitm has been created..");
    });
}

/**
 * check whether the .gitignore exist.
 * if not or not valid,try to create it.
 */
function initIgnore() {
    walk = function (isRoot, dir) {
        var files = fs.readdirSync(dir);
        if (!files.contains('.git')) {
            return;
        }

        if (!isRoot) {
            try {
                process.chdir(dir);
                //console.log(os.EOL);
                //console.log('$ cd ' + dir);
            }
            catch (err) {
                console.log('chdir: ' + err);
            }
        }
        var patterns = [];

        files.forEach(function (file) {
            var tmpPath = dir + '/' + file;
            var stats = fs.statSync(tmpPath);

            if (stats.isDirectory()) {
                var tmpFiles = fs.readdirSync(tmpPath);

                if (tmpFiles && tmpFiles.contains('.git')) {
                    patterns.push(file);
                }
            }
        });
        var ig = ignore().addIgnoreFile('.gitignore');
        patterns = ig.filter(patterns);

        patterns.forEach(function (pattern) {
            var msg = '' + pattern + os.EOL;
            fs.appendFileSync('.gitignore', msg)
        });

        if (!isRoot) {
            process.chdir("..");
            //console.log('$ cd ..');
        }

        files.forEach(function (file) {
            var tmpPath = dir + '/' + file,
                stats = fs.statSync(tmpPath);

            if (stats.isDirectory()) {
                walk(false, tmpPath);
            }
        });
    };

    //console.log('$ cd ' + process.cwd());
    walk(true, process.cwd());
    console.log('The files which be named after .gitignore have been done. ');
}
