#!/usr/bin/env node

var fs = require('fs');
var request = require('sync-request');
var program = require('commander');
var gitm_execute = require('./gitm-execute');
var os = require('os');
var gitm_util = require('./gitm-util');
const assert = require('assert');

program
    .parse(process.argv);

var args = program.args;


var repo;
if (!args.length) {
    try{
        repo = JSON.parse(fs.readFileSync('./repo.gitm'));
    }catch(error){
        console.error(error);
        process.exit(1);
    }
} else if (args.length == 1) {
    try{
        var res = request('GET', args[0]);
        repo = JSON.parse(res.getBody());
    }catch(error){
        console.error(error);
        process.exit(1);
    }
} else {
    console.error('invalid parameters.');
    process.exit(1);
}

if (!repo) {
    console.info("The file repo.gitm does not exist.");
    return;
}

if (!repo.repository && !repo.repositories) {
    console.info("The file repo.gitm is not valid.");
    return;
}

if (repo.repository) {
    clone(repo.repository, __dirname);
} else if (repo.repositories) {
    for (var i = 0, len = repo.repositories.length; i < len; i++) {
        clone(repo.repositories[i], __dirname);
    }
}

function clone(repo, dir) {
    if (!repo) {
        return;
    }

    if (!repo.name) {
        repo.name = getRepoName(repo.url);
    }

    var directory = gitm_util.getdirFromRepo(repo);
    gitm_execute.execSync("git clone " + repo.url + " " + directory + " --progress -v");

    if(repo.branches || repo.repositories){
        var current_dir = process.cwd();
        assert(current_dir);

        gitm_util.chdirRepo(repo);

        //checkout branches
        if (repo.branches) {
            for (var len = repo.branches.length, i = len - 1; i >= 0; i--) {
                var branch = repo.branches[i];
                if (branch == "master") {
                    if (i != 0) {
                        continue;
                    }
                    gitm_execute.execSync("git checkout " + branch);
                }
                gitm_execute.execSync("git checkout -b " + branch + " origin/" + branch);
            }
        }

        //clone sub project
        if (repo.repositories) {
            for (var i = 0, len = repo.repositories.length; i < len; i++) {
                clone(repo.repositories[i]);
            }
        }

        try {
            process.chdir(current_dir);
            console.log('$  cd '+ current_dir);
        }catch (err) {
            console.log('chdir: ' + err);
        }
    }
}

function getRepoName(url) {
    if (!url) {
        return;
    }

    var sep = '/';
    if (!url.match(sep) && !url.match('\\\\')) {
        sep = '/';
    }

    var index = url.lastIndexOf(sep);
    if (index == url.length - 1) {
        url = url.substring(0, index);
        index = url.lastIndexOf(sep);
    }

    var name = url.substring(index + 1);
    name= name.replace(/\.git/g, "");

    return name;
}


function isArray(obj) {
    return Object.prototype.toString.call(obj) == '[object Array]';
}

