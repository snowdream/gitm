#!/usr/bin/env node

var fs = require('fs');
var request = require('sync-request');
var program = require('commander');
var gitm_execute = require('./gitm-execute');
var os = require('os');
var gitm_util = require('./gitm-util');
const assert = require('assert');

program
    .parse(process.argv);

var args = program.args;

var groups;
if(args.length == 1) {
    groups = args[0];
} else {
    console.error('invalid parameters.');
    process.exit(1);
}

var repo;
var branches;
try {
    repo = JSON.parse(fs.readFileSync('./repo.gitm'));
}catch(error){
    console.warn(error);
    process.exit(1);
}

try {
    branches = JSON.parse(fs.readFileSync('./branch.gitm'));
}catch(error){
    console.warn(error);
}

if (!repo) {
    console.info("The file repo.gitm does not exist.");
    return;
}

if (!repo.repository && !repo.repositories) {
    console.info("The file repo.gitm is not valid.");
    return;
}

if (repo.repository) {
    if(!repo.repository.name){
        repo.repository.name = getRepoName( repo.repository.url);
    }
    console.log(os.EOL);
    console.log('$ cd ' + repo.repository.name);
    git_checkout(repo.repository);
} else if (repo.repositories) {
    for (var i = 0, len = repo.repositories.length; i < len; i++) {
        if(!repo.repository[i].name){
            repo.repository[i].name = getRepoName( repo.repository[i].url);
        }
        console.log(os.EOL);
        console.log('$ cd ' + repo.repositories[i].name);
        git_checkout(repo.repositories[i]);
    }
}

function git_checkout(repo) {
    if (!repo) {
        return;
    }

    if (!repo.name) {
        repo.name = getRepoName(repo.url);
    }

    var branch;
    var upBranch;

    if(!branches || !branches[groups] || !branches[groups][repo.name] ){
        branch = groups;
    }else{
        branch = branches[groups][repo.name];
        var array = branch.split(":");
        if(array.length > 0){
            branch = array[0];
        }

        if(array.length > 1){
            upBranch = array[1];
        }
    }


    if(branch){
        if(gitm_util.isLocalBranchExist(branch)){
            gitm_execute.execSync("git checkout "+ branch);
        }else{
            gitm_execute.execSync("git fetch --all --progress -v");

            if(gitm_util.isRemoteBranchExist("origin/"+branch)){
                gitm_execute.execSync("git checkout -b " + branch+" origin/" + branch);
            }else if(gitm_util.isLocalBranchExist(upBranch)){
                gitm_execute.execSync("git checkout -b " + branch+" " + upBranch);
            }else if(gitm_util.isRemoteBranchExist("origin/"+ upBranch)){
                gitm_execute.execSync("git checkout -b " + branch+" origin/" + upBranch);
            }else{
                gitm_execute.execSync("git checkout -b " + branch);
            }
        }
    }

    if (repo.repositories) {
        for (var i = 0, len = repo.repositories.length; i < len; i++) {
            if(!repo.repositories[i].name){
                repo.repositories[i].name = getRepoName(repo.repositories[i].url);
            }


            var current_dir = process.cwd();
            assert(current_dir);

            gitm_util.chdirRepo(repo.repositories[i]);


            git_checkout(repo.repositories[i]);

            try {
                process.chdir(current_dir);
                console.log('$  cd '+ current_dir);
            }catch (err) {
                console.log('chdir: ' + err);
            }
        }

    }
}

/**
 * get repo name from url
 *
 * @param url
 * @returns {string}
 */
function getRepoName(url) {
    if (!url) {
        return;
    }

    var sep = '/';
    if (!url.match(sep) && !url.match('\\\\')) {
        sep = '/';
    }

    var index = url.lastIndexOf(sep);
    if (index == url.length - 1) {
        url = url.substring(0, index);
        index = url.lastIndexOf(sep);
    }

    var name = url.substring(index + 1);
    name = name.replace(/\.git/g, "");

    return name;
}
