#!/usr/bin/env node

var gitm_execute = require('./gitm-execute');
var fs = require('fs');
var os = require('os');

/**
 * change command from gitm style to git style
 *
 * @returns {string}  command
 */
exports.gitm2git = function () {
    var argv = process.argv.slice(2);
    if (argv) {
        return 'git ' + argv.join(' ');
    }
};

/**
 * get argv except git sub comnmand
 *
 * @returns {string}  command
 */
exports.gitm2argv = function () {
    var argv = process.argv.slice(2);
    if (argv) {
        return argv.join(' ');
    }
};

/**
 *  0 execute with git, but not recursively
 *  1 execute with git, recursively
 *  2 execute with gitm
 *
 * @returns {number} type
 */
exports.getType = function () {
    var type = 2;
    var arg = process.argv.slice(2,3);
    var gitm_support = ['init','pull','push','fetch','checkout','clone','-h', '--help', '-V', '--version'];
    var git_support_one =['help'];

    if(process.argv.length > 3 && process.argv.contains('--help')){
        type = 0;
        return type;
    }

    if (arg) {
        if(gitm_support.contains(arg)){
            type = 2;
        }else if(git_support_one.contains(arg)){
            type = 0;
        }else{
            type = 1;
        }
    }
    return type;
};



/**
 * get current git branch name
 */
exports.currentBranch = function(){
  return gitm_execute.execSync('git rev-parse --abbrev-ref HEAD');
};

/**
 * get current git remote name
 */
exports.currentRemote = function(){
    var remote = "origin";
    remote = gitm_execute.execSync('git config branch.master.remote');
    return remote;
};

/**
 * isLocalBranchExist
 */
exports.isLocalBranchExist = function(branch){
    var isExist = false;
    if(!branch){
        return isExist;
    }

    var branches  = gitm_execute.execSync('git branch');
    if(branches){
        branches = branches.replace("*"," ").replace(/(^\s*)|(\s*$)/g, "").split(/\s{2,}/);
        isExist =  branches.contains(branch);
    }

    return isExist;
};


/**
 * isRemoteBranchExist
 */
exports.isRemoteBranchExist = function(branch){
    var isExist = false;
    if(!branch){
        return isExist;
    }

    var branches  = gitm_execute.execSync('git branch -r');
    if(branches){
        branches = branches.replace("*"," ").replace(/(^\s*)|(\s*$)/g, "").split(/\s{2,}/);
        isExist =  branches.contains(branch);
    }

    return isExist;
};

/**
 * get remote origin url
 */
exports.getOriginUrl = function(){
    var url = gitm_execute.execSync('git config --local --get remote.origin.url');
    return url;
};


/**
 * see http://outofmemory.cn/code-snippet/1818/expand-javascript-Array-plus-contains-method
 *
 *
 * @param obj
 * @returns {boolean}
 */
Array.prototype.contains = function(obj) {
    var i = this.length;
    while (i--) {
        if (this[i] == obj) {
            return true;
        }
    }
    return false;
};